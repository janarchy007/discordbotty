"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = exports.setData = void 0;
const undici_1 = require("undici");
const guild_1 = require("./guild");
let token;
function setData(botToken) {
    return __awaiter(this, void 0, void 0, function* () {
        token = botToken;
    });
}
exports.setData = setData;
class Message {
    constructor(data) {
        this.type = data.type;
        this.tts = data.tts;
        this.timestamp = data.timestamp;
        this.pinned = data.pinned;
        this.nonce = data.nonce;
        this.referencedMessage = data.referenced_message;
        this.mentions = data.mentions;
        this.mentionRoles = data.mention_roles;
        this.mentionEveryone = data.mention_everyone;
        this.member = data.member;
        this.id = data.id;
        this.flags = data.flags;
        this.embeds = data.embeds;
        this.components = data.components;
        this.content = data.content;
        this.channelId = data.channel_id;
        this.author = data.author;
        this.attachments = data.attachments;
        this.guildId = data.guild_id;
    }
    get guild() {
        return (0, guild_1.fetchGuild)(this.guildId);
    }
    reply(content) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof content === 'string') {
                const data = {
                    content: content,
                    message_reference: {
                        message_id: this.id,
                        channel_id: this.channelId,
                        guild_id: this.guildId
                    }
                };
                const res = yield (0, undici_1.request)(`https://discord.com/api/v10/channels/${this.channelId}/messages`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bot ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
            }
            else if (typeof content === "object") {
                const data = {
                    content: content.content,
                    embeds: content.embeds,
                    message_reference: {
                        message_id: this.id,
                        channel_id: this.channelId,
                        guild_id: this.guildId
                    }
                };
                const res = yield (0, undici_1.request)(`https://discord.com/api/v10/channels/${this.channelId}/messages`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bot ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
            }
        });
    }
}
exports.Message = Message;
