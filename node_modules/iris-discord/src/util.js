"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = exports.heartBeater = exports.getJSONResponse = void 0;
const events_1 = __importDefault(require("events"));
function getJSONResponse(body) {
    var _a, body_1, body_1_1;
    var _b, e_1, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        let fullBody = '';
        try {
            for (_a = true, body_1 = __asyncValues(body); body_1_1 = yield body_1.next(), _b = body_1_1.done, !_b;) {
                _d = body_1_1.value;
                _a = false;
                try {
                    const data = _d;
                    fullBody += data.toString();
                }
                finally {
                    _a = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_a && !_b && (_c = body_1.return)) yield _c.call(body_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return JSON.parse(fullBody);
    });
}
exports.getJSONResponse = getJSONResponse;
class heartBeater {
    constructor() {
        this.events = new events_1.default.EventEmitter();
        this.heartBeatCount = 0;
    }
    start(interval, connection) {
        this.connection = connection;
        this.hearbeatInterval = interval;
        this.interval = setInterval(() => {
            this.connection.sendUTF(JSON.stringify({
                op: 1,
                d: null
            }));
            this.heartBeatCount++;
            this.events.emit('heartbeat');
        }, interval);
    }
    onHeartBeat(callback) {
        this.events.on('heartbeat', () => {
            callback(this.heartBeatCount);
        });
    }
    stop() {
        clearInterval(this.interval);
    }
}
exports.heartBeater = heartBeater;
class cache {
    constructor() {
        this.cacheGuilds = new Map();
        this.voiceStatesCache = new Map();
    }
    addGuild(guild) {
        this.cacheGuilds.set(guild.id, guild);
    }
    addVoiceState(voiceState) {
        this.voiceStatesCache.set(voiceState.user_id, voiceState);
    }
    removeVoiceState(voiceState) {
        this.voiceStatesCache.delete(voiceState.user_id);
    }
    get guilds() {
        return this.cacheGuilds;
    }
    get voiceStates() {
        return this.voiceStatesCache;
    }
}
exports.cache = cache;
